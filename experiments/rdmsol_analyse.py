"""
Analyse a PCSE ensemble generated by rdmsol_generate.py.

Example:
    %run experiments/rdmsol_analyse.py outputs/rdmsol -v
"""
from pathlib import Path

from matplotlib import pyplot as plt
from tqdm import tqdm

import fpcup
from fpcup.plotting import rcParams

# Parse command line arguments
import argparse
parser = argparse.ArgumentParser(description="Run a PCSE ensemble for multiple location with one sowing date.")
parser.add_argument("output_dir", help="folder to load PCSE outputs from", type=Path)
parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
args = parser.parse_args()

# Load the ensemble summary
summary = fpcup.io.load_ensemble_summary_from_folder(args.output_dir)

# Get the crop types
crop_from_run_id = lambda run_id: run_id.split("_")[0]
summary["crop"] = summary.index.to_series().apply(crop_from_run_id)

# Get the associated RDMSOLs
rdmsol_from_run_id = lambda run_id: int(run_id.split("RDMSOL-")[1].split("_")[0])
summary["RDMSOL"] = summary.index.to_series().apply(rdmsol_from_run_id)
summary.sort_values("RDMSOL", inplace=True)

# Plot summary outputs as a function of RDMSOL for each crop, soiltype, and site
summary_outputs = ("RD", "DOM", "LAIMAX", "TWSO")

# Loop over the crops and generate a figure for each
for (crop, summary_by_crop) in tqdm(summary.groupby("crop"), desc="Plotting figures", unit="crop", leave=args.verbose):
    fig, axs = plt.subplots(nrows=len(summary_outputs), ncols=3, sharex=True, sharey="row", figsize=(10, 10), squeeze=False)

    # Loop over the columns (soil types) first
    for ax_col, (soiltype, summary_by_soiltype) in zip(axs.T, summary_by_crop.groupby("soiltype")):
        ax_col[0].set_title(f"Soil type: {soiltype}")

        # Loop over the rows (summary outputs) next
        for ax, key in zip(ax_col, summary_outputs):
            # Plot a line for each site
            summary_by_soiltype.groupby("geometry").plot.line("RDMSOL", key, ax=ax, alpha=0.5, legend=False)

    axs[0, 0].set_xlim(0, 150)
    for ax, key in zip(axs[:, 0], summary_outputs):
        ax.set_ylabel(key)

    fig.suptitle(crop)
    fig.align_xlabels()
    fig.align_ylabels()

    plt.savefig(fpcup.DEFAULT_RESULTS/f"rdmsol-{crop}.pdf", bbox_inches="tight")
    plt.show()
    plt.close()

"""
Analyse a PCSE ensemble with one varying parameter, as generated by wofost_ensemble_parameters.py.

Example:
    %run plot_ensemble_parameter_single.py outputs/RDMSOL -v
"""
from matplotlib import pyplot as plt
from tqdm import tqdm

import fpcup

### Parse command line arguments
import argparse
parser = argparse.ArgumentParser(description="Analyse a PCSE ensemble with one varying parameter, as generated by wofost_ensemble_parameters.py.")
parser.add_argument("output_dir", help="folder to load PCSE outputs from", type=fpcup.io.Path)
parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
args = parser.parse_args()

args.PARAMETER_NAME = args.output_dir.stem


### CONSTANTS
OUTPUTS_TO_PLOT = ("RD", "DOM", "LAIMAX", "TWSO")  # Parameters to plot


### HELPER FUNCTIONS
def number_of_replicates(data: fpcup.geo.gpd.GeoDataFrame, column: str) -> int:
    """
    Determine the number of replicates in a given column, e.g. number_of_replicates(data, column='geometry') is the number of sites.
    """
    return len(data[column].unique())


### This gets executed only when the script is run normally; not by multiprocessing.
if __name__ == "__main__":
    fpcup.multiprocessing.freeze_support()

    ### SETUP
    # Load the ensemble summary
    inputsummary, summary = fpcup.io.load_ensemble_summary_from_folder(args.output_dir)
    if args.verbose:
        print(f"Loaded input summary, summary from {args.output_dir.absolute()}")

    # Join
    inputsummary.drop(columns=["geometry"], inplace=True)
    summary = summary.join(inputsummary)
    summary.sort_values(args.PARAMETER_NAME, inplace=True)
    if args.verbose:
        print("Joined input/output summary tables")

    # Determine number of runs
    n_crops = number_of_replicates(summary, "crop")
    n_soiltypes = number_of_replicates(summary, "soiltype")
    n_sites = number_of_replicates(summary, "geometry")
    n_parameter_values = number_of_replicates(summary, args.PARAMETER_NAME)


    ### PLOTTING
    # Loop over the crops and generate a figure for each
    for (crop_name, summary_by_crop) in tqdm(summary.groupby("crop"), desc="Plotting figures", unit="crop", leave=args.verbose):
        crop_short = fpcup.crop.CROP2ABBREVIATION[crop_name]

        # Setup
        fig, axs = plt.subplots(nrows=len(OUTPUTS_TO_PLOT), ncols=n_soiltypes, sharex=True, sharey="row", figsize=(10, 10), squeeze=False)

        # Loop over the columns (soil types) first
        for ax_col, (soiltype, summary_by_soiltype) in zip(axs.T, summary_by_crop.groupby("soiltype")):
            ax_col[0].set_title(f"Soil type: {soiltype}")

            # Loop over the rows (summary outputs) next
            for ax, key in zip(ax_col, OUTPUTS_TO_PLOT):
                # Plot a line for each site
                summary_by_soiltype.groupby("geometry").plot.line(args.PARAMETER_NAME, key, ax=ax, alpha=0.5, legend=False)

        # Titles / labels
        axs[0, 0].set_xlim(0, 150)
        for ax, key in zip(axs[:, 0], OUTPUTS_TO_PLOT):
            ax.set_ylabel(key)

        fig.suptitle(f"WOFOST sensitivity to {args.PARAMETER_NAME}: {crop_name} ({n_sites} sites, {n_parameter_values} values)")
        fig.align_xlabels()
        fig.align_ylabels()

        # Save figure
        plt.savefig(fpcup.DEFAULT_RESULTS/f"{args.PARAMETER_NAME}-{crop_short}.pdf", bbox_inches="tight")
        plt.close()

"""
Train a neural network on PCSE inputs/outputs.

Example:
    %run test/nn.py outputs/RDMSOL -v
"""
from matplotlib import pyplot as plt
from tqdm import tqdm

from torch import nn, optim
from torch.utils.data import DataLoader, Dataset

import fpcup


### Parse command line arguments
import argparse
parser = argparse.ArgumentParser(description="Analyse a PCSE ensemble with one varying parameter, as generated by wofost_ensemble_parameters.py.")
parser.add_argument("output_dir", help="folder to load PCSE outputs from", type=fpcup.io.Path)
parser.add_argument("--results_dir", help="folder to save plots into", type=fpcup.io.Path, default=fpcup.DEFAULT_RESULTS/"sensitivity")
parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
args = parser.parse_args()


### Define constants
CROP = "barley"
VARIETY = "Spring_barley_301"

INPUTS = ["RDMSOL", "WAV"]
OUTPUTS = ["DVS", "LAIMAX", "TAGP", "TWSO"]


### This gets executed only when the script is run normally; not by multiprocessing.
if __name__ == "__main__":
    fpcup.multiprocessing.freeze_support()

    ### SETUP
    # Load the ensemble summary
    inputsummary, summary = fpcup.io.load_ensemble_summary_from_folder(args.output_dir)
    if args.verbose:
        print(f"Loaded input summary, summary from {args.output_dir.absolute()}")

    # Join the input/output tables
    inputsummary.drop(columns=["geometry"], inplace=True)
    summary = summary.join(inputsummary, validate="1:1")
    if args.verbose:
        print("Joined input/output summary tables")

    # Select one crop type
    summary = summary.loc[summary["crop"] == CROP]
    summary = summary.loc[summary["variety"] == VARIETY]
    summary.drop(columns=["crop", "variety"], inplace=True)
    if args.verbose:
        print(f"Selected runs for {CROP}/{VARIETY}")

    # Pre-process data
    summary.to_crs(fpcup.geo.WGS84, inplace=True)
    summary["latitude"], summary["longitude"] = summary["geometry"].y, summary["geometry"].x
